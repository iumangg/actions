name: Test Git Actions

on:
  pull_request:
    branches:
      - main
    paths:
      - git/**
  workflow_dispatch:

jobs:
  test-git-configure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Test Git Configure Action with Default Parameters
        uses: ./git/configure

      - name: Verify Default Git Configuration
        run: |
          if [ "$(git config --get user.name)" != "github-actions[bot]" ]; then
            echo "Error: user.name does not match default value" && exit 1
          fi
          if [ "$(git config --get user.email)" != "41898282+github-actions[bot]@users.noreply.github.com" ]; then
            echo "Error: user.email does not match default value" && exit 1
          fi

      - name: Test Git Configure Action
        uses: ./git/configure
        with:
          user_name: "Test User"
          user_email: "test@example.com"

      - name: Verify Git Configuration
        run: |
          if [ "$(git config --get user.name)" != "Test User" ]; then
            echo "Error: user.name does not match expected value" && exit 1
          fi
          if [ "$(git config --get user.email)" != "test@example.com" ]; then
            echo "Error: user.email does not match expected value" && exit 1
          fi

      - name: Test Git Configure Action with Missing Parameters
        uses: ./git/configure
        with:
          user_name: ""
          user_email: ""

      - name: Verify Missing Git Configuration
        run: |
          if [ "$(git config --get user.name)" != "github-actions[bot]" ]; then
            echo "Error: user.name is not empty as expected" && exit 1
          fi
          if [ "$(git config --get user.email)" != "41898282+github-actions[bot]@users.noreply.github.com" ]; then
            echo "Error: user.email is not empty as expected" && exit 1
          fi

  test-git-checkout-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Test Git Checkout Branch Action with Default Parameters
        uses: ./git/checkout-branch

      - name: Verify Default Branch Checkout
        run: |
          if [ "$(git branch --show-current)" != "main" ]; then
            echo "Error: Current branch is not 'main' as expected" && exit 1
          fi
          echo "Default branch checkout verified successfully."

      - name: Test Git Checkout Branch Action
        uses: ./git/checkout-branch
        with:
          branch_name: "test-branch"

      - name: Verify Branch Checkout
        run: |
          if [ "$(git branch --show-current)" != "test-branch" ]; then
            echo "Error: Current branch is not 'test-branch'" && exit 1
          fi
          echo "Branch checkout verified successfully."

      - name: Test Git Checkout Branch Action with Missing Parameters
        uses: ./git/checkout-branch
        with:
          branch_name: ""

      - name: Verify Missing Branch Checkout
        run: |
          if [ "$(git branch --show-current)" != "main" ]; then
            echo "Error: Current branch is not 'main' as expected" && exit 1
          fi
          echo "Missing branch checkout verified successfully."

  test-git-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure git user for commit
        uses: ./git/configure

      - name: Prepare for commit test with default parameters
        run: |
          # Create test files for commit
          echo "Test changes" >> test-changes.txt

      - name: Test Git Commit Action with Default Parameters
        uses: ./git/commit

      - name: Verify Default Commit
        run: |
          if [ "$(git log -1 --pretty=%B)" != "${{ github.job }} job pushed changes" ]; then
            echo "Error: Commit message does not match default value" && exit 1
          fi
          echo "Default commit verified successfully."

      - name: Prepare for commit test with file_path parameter
        run: |
          # Create test files for commit
          echo "Test change in path" >> test-file-in-path.txt
          echo "Test change outside path" >> test-file-outside-path.txt

      - name: Test Git Commit Action with file_path Parameter
        uses: ./git/commit
        with:
          commit_message: "Commit with file_path parameter"
          file_path: "test-file-in-path.txt"

      - name: Verify Commit with file_path Parameter
        run: |
          # Verify the commit message
          if [ "$(git log -1 --pretty=%B)" != "Commit with file_path parameter" ]; then
            echo "Error: Commit message does not match expected value" && exit 1
          fi
          # Verify the commit includes changes from the specified path
          if ! git diff-tree --no-commit-id --name-only -r HEAD | grep -q "^test-file-in-path.txt"; then
            echo "Error: Commit does not include changes from the specified path" && exit 1
          fi
          # Verify the commit does not include changes outside the specified path
          if git diff-tree --no-commit-id --name-only -r HEAD | grep -q "^test-file-outside-path.txt"; then
          echo "Error: Commit includes changes outside the specified path" && exit 1
          fi
          echo "Commit with file_path parameter verified successfully."

      - name: Test Git Commit Action with Custom Commit Message
        uses: ./git/commit
        with:
          commit_message: "Custom commit message for testing"

      - name: Verify Custom Commit Message
        run: |
          if [ "$(git log -1 --pretty=%B)" != "Custom commit message for testing" ]; then
            echo "Error: Commit message does not match expected value" && exit 1
          fi
          echo "Custom commit message verified successfully."
